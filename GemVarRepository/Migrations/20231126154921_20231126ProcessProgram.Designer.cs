// <auto-generated />
using System;
using GemVarRepository.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GemVarRepository.Migrations
{
    [DbContext(typeof(GemVarContext))]
    [Migration("20231126154921_20231126ProcessProgram")]
    partial class _20231126ProcessProgram
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("GemVarRepository.Model.EventReportLink", b =>
                {
                    b.Property<int>("ECID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RPTID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ECID", "RPTID");

                    b.HasIndex("RPTID");

                    b.ToTable("EventReportLinks");
                });

            modelBuilder.Entity("GemVarRepository.Model.FormattedProcessProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PPID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FormattedProcessProgram");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemEvent", b =>
                {
                    b.Property<int>("ECID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("ECID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemReport", b =>
                {
                    b.Property<int>("RPTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("RPTID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemVariable", b =>
                {
                    b.Property<int>("VID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ListSVID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<bool>("System")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VarType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VID");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("GemVarRepository.Model.ProcessParameter", b =>
                {
                    b.Property<Guid>("ProcessProgramId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessCommandCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Definition")
                        .HasColumnType("TEXT");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProcessProgramId", "ProcessCommandCode", "Name");

                    b.ToTable("ProcessParameter");
                });

            modelBuilder.Entity("GemVarRepository.Model.ProcessProgram", b =>
                {
                    b.Property<string>("PPID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PPBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PPID");

                    b.ToTable("ProcessProgram");
                });

            modelBuilder.Entity("GemVarRepository.Model.ReportVariableLink", b =>
                {
                    b.Property<int>("VID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RPTID")
                        .HasColumnType("INTEGER");

                    b.HasKey("VID", "RPTID");

                    b.HasIndex("RPTID");

                    b.ToTable("ReportVariableLink");
                });

            modelBuilder.Entity("GemVarRepository.Model.EventReportLink", b =>
                {
                    b.HasOne("GemVarRepository.Model.GemEvent", "Event")
                        .WithMany("ReportEvents")
                        .HasForeignKey("ECID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GemVarRepository.Model.GemReport", "Report")
                        .WithMany("EventReports")
                        .HasForeignKey("RPTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GemVarRepository.Model.ProcessParameter", b =>
                {
                    b.HasOne("GemVarRepository.Model.FormattedProcessProgram", "ProcessProgramVersion")
                        .WithMany("ProcessParameters")
                        .HasForeignKey("ProcessProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessProgramVersion");
                });

            modelBuilder.Entity("GemVarRepository.Model.ReportVariableLink", b =>
                {
                    b.HasOne("GemVarRepository.Model.GemReport", "Report")
                        .WithMany("ReportVariables")
                        .HasForeignKey("RPTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GemVarRepository.Model.GemVariable", "Variable")
                        .WithMany("ReportVariables")
                        .HasForeignKey("VID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("GemVarRepository.Model.FormattedProcessProgram", b =>
                {
                    b.Navigation("ProcessParameters");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemEvent", b =>
                {
                    b.Navigation("ReportEvents");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemReport", b =>
                {
                    b.Navigation("EventReports");

                    b.Navigation("ReportVariables");
                });

            modelBuilder.Entity("GemVarRepository.Model.GemVariable", b =>
                {
                    b.Navigation("ReportVariables");
                });
#pragma warning restore 612, 618
        }
    }
}
