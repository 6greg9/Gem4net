// <auto-generated />
using System;
using Gem4NetRepository.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gem4NetRepository.Migrations
{
    [DbContext(typeof(GemDbContext))]
    [Migration("20240810093024_NoListSv")]
    partial class NoListSv
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gem4NetRepository.Model.EventReportLink", b =>
                {
                    b.Property<int>("ECID")
                        .HasColumnType("integer");

                    b.Property<int>("RPTID")
                        .HasColumnType("integer");

                    b.HasKey("ECID", "RPTID");

                    b.HasIndex("RPTID");

                    b.ToTable("EventReportLinks");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.FormattedProcessProgram", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalLevel")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Editor")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentModelType")
                        .HasColumnType("text");

                    b.Property<string>("PPBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PPID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SoftwareRevision")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.ToTable("FormattedProcessPrograms");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemAlarm", b =>
                {
                    b.Property<int>("ALID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ALID"));

                    b.Property<int>("ALCD")
                        .HasColumnType("integer");

                    b.Property<bool>("ALED")
                        .HasColumnType("boolean");

                    b.Property<string>("ALTX")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DefaultAlarmEnable")
                        .HasColumnType("boolean");

                    b.Property<int>("DefaultAlarmState")
                        .HasColumnType("integer");

                    b.HasKey("ALID");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemEvent", b =>
                {
                    b.Property<int>("ECID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ECID"));

                    b.Property<int?>("DATAID")
                        .HasColumnType("integer");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.HasKey("ECID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemReport", b =>
                {
                    b.Property<int>("RPTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RPTID"));

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("RPTID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemVariable", b =>
                {
                    b.Property<int>("VID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VID"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("MaxValue")
                        .HasColumnType("text");

                    b.Property<string>("MinValue")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<bool>("System")
                        .HasColumnType("boolean");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VarType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VID");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.ProcessProgram", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalLevel")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Editor")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentModelType")
                        .HasColumnType("text");

                    b.Property<string>("PPBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PPID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SoftwareRevision")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.ToTable("ProcessPrograms");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Gem4NetRepository.Model.ReportVariableLink", b =>
                {
                    b.Property<int>("VID")
                        .HasColumnType("integer");

                    b.Property<int>("RPTID")
                        .HasColumnType("integer");

                    b.HasKey("VID", "RPTID");

                    b.HasIndex("RPTID");

                    b.ToTable("ReportVariableLinks");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.FormattedProcessProgramLog", b =>
                {
                    b.HasBaseType("Gem4NetRepository.Model.FormattedProcessProgram");

                    b.Property<int>("PPChangeStatus")
                        .HasColumnType("integer");

                    b.ToTable("FormattedProcessProgramLogs");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.ProcessProgramLog", b =>
                {
                    b.HasBaseType("Gem4NetRepository.Model.ProcessProgram");

                    b.Property<int>("PPChangeStatus")
                        .HasColumnType("integer");

                    b.ToTable("ProcessProgramLogs");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.EventReportLink", b =>
                {
                    b.HasOne("Gem4NetRepository.Model.GemEvent", "Event")
                        .WithMany("ReportEvents")
                        .HasForeignKey("ECID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gem4NetRepository.Model.GemReport", "Report")
                        .WithMany("EventReports")
                        .HasForeignKey("RPTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.ReportVariableLink", b =>
                {
                    b.HasOne("Gem4NetRepository.Model.GemReport", "Report")
                        .WithMany("ReportVariables")
                        .HasForeignKey("RPTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gem4NetRepository.Model.GemVariable", "Variable")
                        .WithMany("ReportVariables")
                        .HasForeignKey("VID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemEvent", b =>
                {
                    b.Navigation("ReportEvents");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemReport", b =>
                {
                    b.Navigation("EventReports");

                    b.Navigation("ReportVariables");
                });

            modelBuilder.Entity("Gem4NetRepository.Model.GemVariable", b =>
                {
                    b.Navigation("ReportVariables");
                });
#pragma warning restore 612, 618
        }
    }
}
